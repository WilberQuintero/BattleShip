/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;

/**
 *
 * @author javie
 */
public class PantallaPartida extends javax.swing.JFrame {

    private List<Map<String, Object>> barcosColocados = new ArrayList<>();
    
    /**
     * Creates new form Partida
     */
    public PantallaPartida() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        oponenteTablero = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        miTablero = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        oponenteTablero.setBackground(new java.awt.Color(232, 255, 255));

        javax.swing.GroupLayout oponenteTableroLayout = new javax.swing.GroupLayout(oponenteTablero);
        oponenteTablero.setLayout(oponenteTableroLayout);
        oponenteTableroLayout.setHorizontalGroup(
            oponenteTableroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 361, Short.MAX_VALUE)
        );
        oponenteTableroLayout.setVerticalGroup(
            oponenteTableroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 371, Short.MAX_VALUE)
        );

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setText("Tus barcos");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel2.setText("Oponente");

        jButton1.setText("Abandonar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        miTablero.setBackground(new java.awt.Color(220, 240, 255));
        miTablero.setPreferredSize(new java.awt.Dimension(361, 371));

        javax.swing.GroupLayout miTableroLayout = new javax.swing.GroupLayout(miTablero);
        miTablero.setLayout(miTableroLayout);
        miTableroLayout.setHorizontalGroup(
            miTableroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        miTableroLayout.setVerticalGroup(
            miTableroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(206, 206, 206)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(miTablero, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 111, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(249, 249, 249))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(oponenteTablero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47))))
            .addGroup(layout.createSequentialGroup()
                .addGap(410, 410, 410)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(37, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(oponenteTablero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(miTablero, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(35, 35, 35))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    
    public void dibujarTableros(String flotaString){
        dibujarOponenteTablero();
        System.out.println("FLOTA QUE LLEGA en METODO DIBUJAR TABLERO:  "+flotaString);
        this.barcosColocados=obtenerBarcosDesdeFlota(flotaString);
        System.out.println("PRIMER BARCO DE LA FLOTA GUARDADA:   "+barcosColocados.getFirst());
        System.out.println("ULTIMO BARCO DE LA FLOTA GUARDADA:   "+barcosColocados.getLast());
        dibujarMiTablero();
    }
    
    
    
    
    
    private Image rotateImage(Image img) {
        int w = img.getWidth(null);
        int h = img.getHeight(null);

        // El nuevo BufferedImage debe ser suficientemente grande para contener la imagen rotada
        BufferedImage rotated = new BufferedImage(h, w, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = rotated.createGraphics();
        g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);

        // Mover el punto de origen al centro del nuevo lienzo
        g2d.translate(h / 2.0, w / 2.0);
        g2d.rotate(Math.toRadians(90));
        g2d.translate(-w / 2.0, -h / 2.0);

        // Dibujar la imagen rotada
        g2d.drawImage(img, 0, 0, null);
        g2d.dispose();

        return rotated;
    }
    
    
    private List<Map<String, Object>> obtenerBarcosDesdeFlota(String flotaString) {
          List<Map<String, Object>> barcos = new ArrayList<>();

        // Dividir por espacio, ya que los barcos están separados por espacios
        String[] partes = flotaString.trim().split("\\s+");

        for (int i = 0; i < partes.length; i++) {
            try {
                // Ejemplo: partes[i] = "PORTAAVIONES:"
                // partes[i+1] = "4,"
                // partes[i+2] = "0,0,"
                // partes[i+3] = "HORIZONTAL"

                if (!partes[i].contains(":")) continue;

                // Extraer los 4 elementos que definen al barco
                int tamaño = Integer.parseInt(partes[i + 1].replace(",", "").trim());
                String[] coords = partes[i + 2].replace(",", "").trim().split("\\s*,?\\s*");
                int columna = Integer.parseInt(coords[0]);
                int fila = Integer.parseInt(coords[1]);
                boolean rotado = partes[i + 3].trim().equalsIgnoreCase("VERTICAL");

                Map<String, Object> barco = new HashMap<>();
                barco.put("columna", columna);
                barco.put("fila", fila);
                barco.put("tamaño", tamaño);
                barco.put("rotado", rotado);

                barcos.add(barco);

                i += 3; // Saltar a la siguiente entrada de barco

            } catch (Exception e) {
                System.out.println("Error al procesar barco a partir de: " + partes[i] + " -> " + e.getMessage());
            }
        }

        return barcos;
    }
    
    
    
    private ImageIcon cargarIcono(String ruta) {
        URL url = getClass().getResource(ruta);
        if (url == null) {
            System.err.println("No se encontró la imagen: " + ruta);
            return new ImageIcon();
        }
        return new ImageIcon(url);
    }
    
    private void dibujarMiTablero() {
        miTablero.removeAll();
        miTablero.setLayout(null);

        int cellSize = 40;
        int filas = 10;
        int columnas = 10;

        int anchoTablero = (columnas + 1) * cellSize;
        int altoTablero = (filas + 1) * cellSize;

        miTablero.setPreferredSize(new Dimension(anchoTablero, altoTablero));

        // Fondo del tablero
        ImageIcon fondoOriginal = cargarIcono("/Images/Board.png");
        if (fondoOriginal == null) {
            System.out.println("No se pudo cargar la imagen de fondo");
            return;
        }

        Image imagenEscalada = fondoOriginal.getImage().getScaledInstance(anchoTablero, altoTablero, Image.SCALE_SMOOTH);
        ImageIcon fondo = new ImageIcon(imagenEscalada);
        JLabel fondoLabel = new JLabel(fondo);
        fondoLabel.setBounds(0, 0, anchoTablero, altoTablero);
        fondoLabel.setLayout(null);

        // Crear botones invisibles en cada celda (como en el tablero del oponente)
        for (int fila = 0; fila < filas; fila++) {
            for (int columna = 0; columna < columnas; columna++) {
                JButton celda = new JButton();
                celda.setText("");
                celda.setEnabled(false); // 👈 No permite clics
                celda.setBorder(BorderFactory.createLineBorder(Color.BLUE));
                celda.setContentAreaFilled(false);
                celda.setOpaque(false);
                celda.setFocusable(false);
                celda.setBounds((columna + 1) * cellSize, (fila + 1) * cellSize, cellSize, cellSize);
                fondoLabel.add(celda);
            }
        }

        // Dibujar todos los barcos de la lista
        for (Map<String, Object> barco : barcosColocados) {
            int fila = (int) barco.get("fila");
            int columna = (int) barco.get("columna");
            int tamaño = (int) barco.get("tamaño");
            boolean rotado = (boolean) barco.get("rotado");

            String ruta;
            switch (tamaño) {
                case 1: ruta = "/Images/Submarine.png"; break;
                case 2: ruta = "/Images/Destroyer.png"; break;
                case 3: ruta = "/Images/Cruise.png"; break;
                case 4: ruta = "/Images/Battleship.png"; break;
                default: ruta = "/Images/Battleship.png"; break;
            }

            ImageIcon barcoIcon = cargarIcono(ruta);
            if (barcoIcon == null) {
                System.out.println("No se pudo cargar la imagen del barco: " + ruta);
                continue;
            }

            Image img = barcoIcon.getImage();
            Image barcoEscalado;

            if (rotado) {
                img = rotateImage(img);
                barcoEscalado = img.getScaledInstance(cellSize, cellSize * tamaño, Image.SCALE_SMOOTH);
            } else {
                barcoEscalado = img.getScaledInstance(cellSize * tamaño, cellSize, Image.SCALE_SMOOTH);
            }

            ImageIcon barcoFinal = new ImageIcon(barcoEscalado);
            JLabel barcoLabel = new JLabel(barcoFinal);

            int x = (columna + 1) * cellSize;
            int y = (fila + 1) * cellSize;

            if (rotado) {
                barcoLabel.setBounds(x, y, cellSize, cellSize * tamaño);
            } else {
                barcoLabel.setBounds(x, y, cellSize * tamaño, cellSize);
            }

            fondoLabel.add(barcoLabel);
        }

        miTablero.add(fondoLabel);
        miTablero.revalidate();
        miTablero.repaint();
    }
    
    private void dibujarOponenteTablero() {
        oponenteTablero.removeAll();
        oponenteTablero.setLayout(null);

        int cellSize = 40;
        int filas = 10;
        int columnas = 10;
        int offset = cellSize;

        int anchoTablero = (columnas + 1) * cellSize;
        int altoTablero = (filas + 1) * cellSize;

        ImageIcon fondoOriginal = cargarIcono("/Images/Board.png");
        Image imagenEscalada = fondoOriginal.getImage().getScaledInstance(anchoTablero, altoTablero, Image.SCALE_SMOOTH);
        ImageIcon fondo = new ImageIcon(imagenEscalada);

        JLabel fondoLabel = new JLabel(fondo);
        fondoLabel.setBounds(0, 0, anchoTablero, altoTablero);
        fondoLabel.setLayout(null);

        for (int fila = 0; fila < filas; fila++) {
            for (int columna = 0; columna < columnas; columna++) {
                JButton celda = new JButton();
                celda.setText("");
                celda.setBackground(new Color(255, 255, 255, 0));
                celda.setBorder(BorderFactory.createLineBorder(Color.GREEN));
                celda.setBounds((columna + 1) * cellSize, (fila + 1) * cellSize, cellSize, cellSize);
                celda.setActionCommand(fila + "," + columna);
                celda.setFocusable(false);
                celda.setContentAreaFilled(false);
                celda.setOpaque(false);

                celda.addActionListener(e -> {
                    String[] pos = e.getActionCommand().split(",");
                    int x = Integer.parseInt(pos[0]);
                    int y = Integer.parseInt(pos[1]);

                    if (siImpactado(x, y)) {
                        ImageIcon imagen = cargarIcono("/Images/failure.png");
                        celda.setIcon(imagen);
                        System.out.println("¡Impactado! (" + x + "," + y + ")");
                    } else {
                        ImageIcon imagen = cargarIcono("/Images/hit.png");
                        celda.setIcon(imagen);
                        System.out.println("¡No Impactado! (" + x + "," + y + ")");
                    }

                    celda.setEnabled(false);
                });

                fondoLabel.add(celda);
            }
        }

        oponenteTablero.add(fondoLabel);
        oponenteTablero.setPreferredSize(new Dimension(anchoTablero, altoTablero));
        oponenteTablero.revalidate();
        oponenteTablero.repaint();
    }
    
    
    //METODO PARA SABER SI LA CASILLA FUE IMPACTADA A UN BARCO O NO
    private boolean siImpactado(int x, int y) {
        //SOLO ES PARA SIMULAR
        double probabilidadImpacto = Math.random(); 
    return probabilidadImpacto < 0.5;
    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PantallaPartida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PantallaPartida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PantallaPartida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PantallaPartida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PantallaPartida().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel miTablero;
    private javax.swing.JPanel oponenteTablero;
    // End of variables declaration//GEN-END:variables
}
